{"ast":null,"code":"var _jsxFileName = \"/Users/taeng0720/Documents/GitHub/IntroductionWeb/src/Component/Menu/js/ParticleCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticleSystemSketch = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const particles = useRef([]);\n  const colors = [\"#FFE300\", \"#FF7494\", \"#00E6FF\", \"#89FF47\"];\n  let animationFrameId;\n\n  // Particle 클래스\n  class Particle {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n      this.size = Math.random() * 25 + 5; // 5 ~ 30\n      this.color = colors[Math.floor(Math.random() * colors.length)];\n      this.velocityX = (Math.random() - 0.5) * 2; // X축 속도\n      this.velocityY = (Math.random() - 0.5) * 2; // Y축 속도\n      this.life = 100; // 수명\n    }\n    update() {\n      this.x += this.velocityX;\n      this.y += this.velocityY;\n      this.size *= 0.95; // 크기 감소\n      this.life -= 2; // 수명 감소\n    }\n    render(ctx) {\n      if (this.life > 0) {\n        ctx.beginPath();\n        ctx.fillStyle = this.color;\n        ctx.globalAlpha = this.life / 100; // 투명도\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.closePath();\n      }\n    }\n    isDead() {\n      return this.life <= 0 || this.size < 1;\n    }\n  }\n\n  // 캔버스 초기화 및 애니메이션 루프\n  const animate = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height); // 캔버스 초기화\n\n    // 입자 업데이트 및 렌더링\n    particles.current.forEach((particle, index) => {\n      particle.update();\n      particle.render(ctx);\n\n      // 수명이 다한 입자 제거\n      if (particle.isDead()) {\n        particles.current.splice(index, 1);\n      }\n    });\n\n    // 다음 프레임 요청\n    animationFrameId = requestAnimationFrame(animate);\n  };\n\n  // 마우스 이벤트 핸들러\n  const handleMouseMove = e => {\n    const x = e.clientX;\n    const y = e.clientY;\n\n    // 새 입자 생성\n    for (let i = 0; i < 3; i++) {\n      particles.current.push(new Particle(x, y));\n    }\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // 애니메이션 시작\n    animate();\n\n    // 이벤트 리스너 등록\n    window.addEventListener(\"mousemove\", handleMouseMove);\n\n    // 창 크기 조절 이벤트\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    window.addEventListener(\"resize\", handleResize);\n\n    // 정리 작업\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      display: \"block\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 10\n  }, this);\n};\n_s(ParticleSystemSketch, \"RZqcCCIzt5H9d08IEpeng3KZdgY=\");\n_c = ParticleSystemSketch;\nexport default ParticleSystemSketch;\nvar _c;\n$RefreshReg$(_c, \"ParticleSystemSketch\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","ParticleSystemSketch","_s","canvasRef","particles","colors","animationFrameId","Particle","constructor","x","y","size","Math","random","color","floor","length","velocityX","velocityY","life","update","render","ctx","beginPath","fillStyle","globalAlpha","arc","PI","fill","closePath","isDead","animate","canvas","current","getContext","clearRect","width","height","forEach","particle","index","splice","requestAnimationFrame","handleMouseMove","e","clientX","clientY","i","push","window","innerWidth","innerHeight","addEventListener","handleResize","cancelAnimationFrame","removeEventListener","ref","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/taeng0720/Documents/GitHub/IntroductionWeb/src/Component/Menu/js/ParticleCanvas.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\n\nconst ParticleSystemSketch = () => {\n  const canvasRef = useRef(null);\n  const particles = useRef([]);\n  const colors = [\"#FFE300\", \"#FF7494\", \"#00E6FF\", \"#89FF47\"];\n  let animationFrameId;\n\n  // Particle 클래스\n  class Particle {\n    constructor(x, y) {\n      this.x = x;\n      this.y = y;\n      this.size = Math.random() * 25 + 5; // 5 ~ 30\n      this.color = colors[Math.floor(Math.random() * colors.length)];\n      this.velocityX = (Math.random() - 0.5) * 2; // X축 속도\n      this.velocityY = (Math.random() - 0.5) * 2; // Y축 속도\n      this.life = 100; // 수명\n    }\n\n    update() {\n      this.x += this.velocityX;\n      this.y += this.velocityY;\n      this.size *= 0.95; // 크기 감소\n      this.life -= 2; // 수명 감소\n    }\n\n    render(ctx) {\n      if (this.life > 0) {\n        ctx.beginPath();\n        ctx.fillStyle = this.color;\n        ctx.globalAlpha = this.life / 100; // 투명도\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.closePath();\n      }\n    }\n\n    isDead() {\n      return this.life <= 0 || this.size < 1;\n    }\n  }\n\n  // 캔버스 초기화 및 애니메이션 루프\n  const animate = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height); // 캔버스 초기화\n\n    // 입자 업데이트 및 렌더링\n    particles.current.forEach((particle, index) => {\n      particle.update();\n      particle.render(ctx);\n\n      // 수명이 다한 입자 제거\n      if (particle.isDead()) {\n        particles.current.splice(index, 1);\n      }\n    });\n\n    // 다음 프레임 요청\n    animationFrameId = requestAnimationFrame(animate);\n  };\n\n  // 마우스 이벤트 핸들러\n  const handleMouseMove = (e) => {\n    const x = e.clientX;\n    const y = e.clientY;\n\n    // 새 입자 생성\n    for (let i = 0; i < 3; i++) {\n      particles.current.push(new Particle(x, y));\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // 애니메이션 시작\n    animate();\n\n    // 이벤트 리스너 등록\n    window.addEventListener(\"mousemove\", handleMouseMove);\n\n    // 창 크기 조절 이벤트\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    window.addEventListener(\"resize\", handleResize);\n\n    // 정리 작업\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n      window.removeEventListener(\"mousemove\", handleMouseMove);\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  return <canvas ref={canvasRef} style={{ display: \"block\" }} />;\n};\n\nexport default ParticleSystemSketch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}