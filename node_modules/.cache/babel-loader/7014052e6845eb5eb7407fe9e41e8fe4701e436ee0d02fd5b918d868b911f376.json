{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useTypingEffect = (textArray, typingSpeed = 100, pauseTime = 1500) => {\n  _s();\n  const [displayText, setDisplayText] = useState(\"\"); // 화면에 표시될 텍스트\n  const [currentIndex, setCurrentIndex] = useState(0); // 현재 타이핑 중인 단어의 인덱스\n  const [charIndex, setCharIndex] = useState(0); // 현재 단어에서 타이핑 중인 문자 인덱스\n  const [isDeleting, setIsDeleting] = useState(false); // 삭제 중인지 여부\n  const [isTextChanging, setIsTextChanging] = useState(false); // 텍스트 변경 여부 (애니메이션 트리거용)\n\n  useEffect(() => {\n    if (textArray.length === 0) return; // 텍스트 배열이 비어 있으면 종료\n\n    const currentText = textArray[currentIndex]; // 현재 타이핑할 텍스트\n\n    if (!currentText) return; // currentText가 없으면 종료\n\n    let typingTimeout;\n    if (isDeleting) {\n      typingTimeout = setTimeout(() => {\n        setDisplayText(prev => prev.slice(0, prev.length - 1));\n        setCharIndex(prev => prev - 1);\n      }, typingSpeed / 2); // 삭제 속도는 타이핑 속도의 절반\n    } else {\n      typingTimeout = setTimeout(() => {\n        setDisplayText(prev => prev + currentText[charIndex]);\n        setCharIndex(prev => prev + 1);\n      }, typingSpeed);\n    }\n\n    // 타이핑 후 대기 시간\n    if (!isDeleting && charIndex === currentText.length) {\n      setTimeout(() => setIsDeleting(true), pauseTime); // 타이핑 후 대기 시간\n    }\n\n    // 삭제 후 텍스트 변경\n    if (isDeleting && displayText === \"\") {\n      setIsDeleting(false);\n      setCharIndex(0);\n      setIsTextChanging(true); // 텍스트 변경 애니메이션 트리거\n      setCurrentIndex(prev => (prev + 1) % textArray.length); // 다음 단어로 전환\n    }\n\n    // 텍스트 변경이 끝났을 때 애니메이션 상태 초기화\n    if (!isDeleting && displayText === currentText && isTextChanging) {\n      setIsTextChanging(false);\n    }\n    return () => clearTimeout(typingTimeout);\n  }, [charIndex, currentIndex, displayText, isDeleting, isTextChanging, textArray, typingSpeed, pauseTime]);\n  return {\n    displayText,\n    isTextChanging\n  }; // 최종 화면에 표시될 타이핑된 텍스트와 텍스트 변경 상태\n};\n_s(useTypingEffect, \"1enlrdGV0wgBTT9brhUq9Nh1/KI=\");\nexport default useTypingEffect;","map":{"version":3,"names":["useState","useEffect","useTypingEffect","textArray","typingSpeed","pauseTime","_s","displayText","setDisplayText","currentIndex","setCurrentIndex","charIndex","setCharIndex","isDeleting","setIsDeleting","isTextChanging","setIsTextChanging","length","currentText","typingTimeout","setTimeout","prev","slice","clearTimeout"],"sources":["/Users/taeng0720/Documents/GitHub/IntroductionWeb/src/Component/Profile/js/useTypingEffect.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useTypingEffect = (textArray, typingSpeed = 100, pauseTime = 1500) => {\n    const [displayText, setDisplayText] = useState(\"\"); // 화면에 표시될 텍스트\n    const [currentIndex, setCurrentIndex] = useState(0); // 현재 타이핑 중인 단어의 인덱스\n    const [charIndex, setCharIndex] = useState(0); // 현재 단어에서 타이핑 중인 문자 인덱스\n    const [isDeleting, setIsDeleting] = useState(false); // 삭제 중인지 여부\n    const [isTextChanging, setIsTextChanging] = useState(false); // 텍스트 변경 여부 (애니메이션 트리거용)\n\n    useEffect(() => {\n        if (textArray.length === 0) return; // 텍스트 배열이 비어 있으면 종료\n\n        const currentText = textArray[currentIndex]; // 현재 타이핑할 텍스트\n\n        if (!currentText) return; // currentText가 없으면 종료\n\n        let typingTimeout;\n\n        if (isDeleting) {\n            typingTimeout = setTimeout(() => {\n                setDisplayText((prev) => prev.slice(0, prev.length - 1));\n                setCharIndex((prev) => prev - 1);\n            }, typingSpeed / 2); // 삭제 속도는 타이핑 속도의 절반\n        } else {\n            typingTimeout = setTimeout(() => {\n                setDisplayText((prev) => prev + currentText[charIndex]);\n                setCharIndex((prev) => prev + 1);\n            }, typingSpeed);\n        }\n\n        // 타이핑 후 대기 시간\n        if (!isDeleting && charIndex === currentText.length) {\n            setTimeout(() => setIsDeleting(true), pauseTime); // 타이핑 후 대기 시간\n        }\n\n        // 삭제 후 텍스트 변경\n        if (isDeleting && displayText === \"\") {\n            setIsDeleting(false);\n            setCharIndex(0);\n            setIsTextChanging(true); // 텍스트 변경 애니메이션 트리거\n            setCurrentIndex((prev) => (prev + 1) % textArray.length); // 다음 단어로 전환\n        }\n\n        // 텍스트 변경이 끝났을 때 애니메이션 상태 초기화\n        if (!isDeleting && displayText === currentText && isTextChanging) {\n            setIsTextChanging(false);\n        }\n\n        return () => clearTimeout(typingTimeout);\n    }, [charIndex, currentIndex, displayText, isDeleting, isTextChanging, textArray, typingSpeed, pauseTime]);\n\n    return { displayText, isTextChanging }; // 최종 화면에 표시될 타이핑된 텍스트와 텍스트 변경 상태\n};\n\nexport default useTypingEffect;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,eAAe,GAAGA,CAACC,SAAS,EAAEC,WAAW,GAAG,GAAG,EAAEC,SAAS,GAAG,IAAI,KAAK;EAAAC,EAAA;EACxE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACrD,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE7DC,SAAS,CAAC,MAAM;IACZ,IAAIE,SAAS,CAACc,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;;IAEpC,MAAMC,WAAW,GAAGf,SAAS,CAACM,YAAY,CAAC,CAAC,CAAC;;IAE7C,IAAI,CAACS,WAAW,EAAE,OAAO,CAAC;;IAE1B,IAAIC,aAAa;IAEjB,IAAIN,UAAU,EAAE;MACZM,aAAa,GAAGC,UAAU,CAAC,MAAM;QAC7BZ,cAAc,CAAEa,IAAI,IAAKA,IAAI,CAACC,KAAK,CAAC,CAAC,EAAED,IAAI,CAACJ,MAAM,GAAG,CAAC,CAAC,CAAC;QACxDL,YAAY,CAAES,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;MACpC,CAAC,EAAEjB,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC,MAAM;MACHe,aAAa,GAAGC,UAAU,CAAC,MAAM;QAC7BZ,cAAc,CAAEa,IAAI,IAAKA,IAAI,GAAGH,WAAW,CAACP,SAAS,CAAC,CAAC;QACvDC,YAAY,CAAES,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;MACpC,CAAC,EAAEjB,WAAW,CAAC;IACnB;;IAEA;IACA,IAAI,CAACS,UAAU,IAAIF,SAAS,KAAKO,WAAW,CAACD,MAAM,EAAE;MACjDG,UAAU,CAAC,MAAMN,aAAa,CAAC,IAAI,CAAC,EAAET,SAAS,CAAC,CAAC,CAAC;IACtD;;IAEA;IACA,IAAIQ,UAAU,IAAIN,WAAW,KAAK,EAAE,EAAE;MAClCO,aAAa,CAAC,KAAK,CAAC;MACpBF,YAAY,CAAC,CAAC,CAAC;MACfI,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;MACzBN,eAAe,CAAEW,IAAI,IAAK,CAACA,IAAI,GAAG,CAAC,IAAIlB,SAAS,CAACc,MAAM,CAAC,CAAC,CAAC;IAC9D;;IAEA;IACA,IAAI,CAACJ,UAAU,IAAIN,WAAW,KAAKW,WAAW,IAAIH,cAAc,EAAE;MAC9DC,iBAAiB,CAAC,KAAK,CAAC;IAC5B;IAEA,OAAO,MAAMO,YAAY,CAACJ,aAAa,CAAC;EAC5C,CAAC,EAAE,CAACR,SAAS,EAAEF,YAAY,EAAEF,WAAW,EAAEM,UAAU,EAAEE,cAAc,EAAEZ,SAAS,EAAEC,WAAW,EAAEC,SAAS,CAAC,CAAC;EAEzG,OAAO;IAAEE,WAAW;IAAEQ;EAAe,CAAC,CAAC,CAAC;AAC5C,CAAC;AAACT,EAAA,CAlDIJ,eAAe;AAoDrB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}